<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <!-- groupId 最少包括3部分,首先是com/org,紧跟着是公司名,然后是产品线(不是具体产品),是一堆产品的总称.-->
  <!-- 例如com.alipay.sofa,org.springframework.cloud.-->
  <!-- 因为涉及到域名所属问题,索引groupId需要慎重的考虑,而不是随便命名.-->
  <groupId>org.jdkstack</groupId>
  <artifactId>jdklog</artifactId>
  <version>11.0.11</version>
  <packaging>pom</packaging>
  <name>jdklog</name>
  <description>
    版本参考http://openjdk.java.net/jeps/322
    六个月发行模型中的版本号
    在六个月的发行模型下，版本号的元素变化如下:
    $FEATURE 每六个月递增一次:2018年3月发行版是JDK 10,2018年9月发行版是JDK 11,依此类推.
    $INTERIM始终为零,因为六个月的模型不包含临时版本.我们在此保留它的灵活性,以便将来对该发行版模型进行修订时可以包括此类发行版,
    并说JDK$N.1和JDK$N.2是JDK的兼容升级 $N.作为示例,JDK 1.4.1和1.4.2发行版实质上是临时发行版,在该方案下应分别标记为4.1和4.2.
    $UPDATE在一个月后$FEATURE递增,然后在以后每三个月递增一次:2018年4月发行版是JDK 10.0.1,7月发行版是JDK 10.0.2,依此类推.
    我们确实希望大多数功能版本至少包含一个或两个重要功能,而更新版本永远不要包含不兼容的更改.结合$INTERIM始终为零的事实,
    在实践中,此方案通常会定义版本号,该版本号与JEP 223方案所定义的版本号没有太大不同.
  </description>
  <url>https://www.jdklog.org</url>
  <licenses>
    <license>
      <name>GPL-2.0 License</name>
      <url>http://www.gnu.org/licenses/old-licenses/gpl-2.0.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
  <developers>
    <developer>
      <id>jdklog</id>
      <name>Joe</name>
      <email>jdkstack@gmail.com</email>
    </developer>
  </developers>
  <modules>
    <module>jdklog-api</module>
    <module>jdklog-core</module>
    <module>jdklog-examples</module>
    <module>jdklog-jmh</module>
  </modules>
  <scm>
    <connection>scm:git:git@github.com:jdkstack/jdklog.git</connection>
    <developerConnection>scm:git:git@github.com:jdkstack/jdklog.git</developerConnection>
    <url>git@github.com:jdkstack/jdklog.git</url>
    <tag>jdklog-11.0.11</tag>
  </scm>
  <properties>
    <!--  1:统一字符集编码UTF-8 -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- 默认直接读取系统参数配置的jdk版本. -->
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <maven.compiler.compilerVersion>11</maven.compiler.compilerVersion>
    <!-- sonarcloud必须的三个属性.-->
    <sonar.projectKey>${project.groupId}:${project.artifactId}</sonar.projectKey>
    <sonar.organization>jdkstack</sonar.organization>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
  </properties>
  <dependencyManagement>
    <!--  1:统一管理依赖版本 -->
  </dependencyManagement>
  <build>
    <pluginManagement>
      <!--  1:统一管理插件版本 -->
    </pluginManagement>
    <plugins>
      <plugin>
        <!-- Resources插件处理将项目资源复制到输出目录的问题-->
        <artifactId>maven-resources-plugin</artifactId>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.2.0</version>
      </plugin>
      <plugin>
        <!-- 编译-->
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <!--  1:使用jdk11进行编译,直接使用系统参数-->
          <compilerArgs>
            <arg>--add-exports=java.base/jdk.internal.loader=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/jdk.internal.logger=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/jdk.internal.reflect=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/sun.util.logging=ALL-UNNAMED</arg>
            <arg>--add-exports=java.base/sun.util.logging=ALL-UNNAMED</arg>
          </compilerArgs>
          <compilerVersion>${maven.compiler.compilerVersion}</compilerVersion>
          <encoding>UTF-8</encoding>
          <source>${maven.compiler.source}</source>
          <!-- 如果我们的代码想要访问JDK模块化的代码,可以使用下面的选项.-->
          <!-- ALL-UNNAMED未命名的意思是开放给所有的包访问,如果想固定给某个包的话,填写对应的包名即可.-->
          <target>${maven.compiler.target}</target>
        </configuration>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.10.0</version>
      </plugin>
      <plugin>
        <!-- 打包-->
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <!--  1:打jar包排除静态的文件,不需要-->
          <archive>
            <!-- 1:排除Maven自己的描述文件,true放两个文件,false不放这两个文件 -->
            <!-- 2: server4-server-1.0.jar/META-INF/maven/org.server/server4-server/ -->
            <!-- 3:pom.properties-->
            <!-- #Generated by Maven
                 #Sun Aug 23 14:31:44 CST 2020
                  groupId=org.server
                  artifactId=server4-server
                  version=1.0
             -->
            <!-- 项目的pom.xml-->
            <!-- 但是不影响 src/resources/METE-INF下面的资源文件-->
            <!-- 所谓META-INF, 说白了就是存放一些meta information相关的文件的这么一个文件夹-->
            <addMavenDescriptor>false</addMavenDescriptor>
          </archive>
          <excludes>
            <exclude>log4j2.properties</exclude>
            <exclude>server.properties</exclude>
          </excludes>
        </configuration>
        <!-- https://maven.apache.org/plugins/maven-jar-plugin/examples/include-exclude.html-->
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.2.2</version>
      </plugin>
      <plugin>
        <!-- 测试-->
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
        <!-- 编译跳过测试用例 mvn install -DskipTests 或者 mvn install -Dmaven.test.skip=true-->
        <!-- 参考 http://maven.apache.org/surefire/maven-surefire-plugin/examples/skipping-test.html-->
        <groupId>org.apache.maven.plugins</groupId>
        <version>2.22.2</version>
      </plugin>
      <plugin>
        <!-- 代码样式检测. -->
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <!-- 官方规范地址: https://checkstyle.org/ -->
          <!-- 使用google规范. -->
          <configLocation>style/checkstyle/google/google_checks.xml</configLocation>
          <!--使用sun规范.
            <configLocation>checkstyle/sun/sun_checks.xml</configLocation>
          -->
          <encoding>UTF-8</encoding>
          <failOnViolation>true</failOnViolation>
          <!-- 是否对test目录中的代码进行检查-->
          <includeTestSourceDirectory>false</includeTestSourceDirectory>
          <!-- 解决这个问题: Unable to locate Source XRef to link to - DISABLED. -->
          <linkXRef>false</linkXRef>
          <!-- 检测结果输出到控制台-->
          <logViolationsToConsole>true</logViolationsToConsole>
          <!-- -->
          <suppressionsLocation>style/checkstyle/google/checkstyle-suppressions.xml</suppressionsLocation>
        </configuration>
        <dependencies>
          <dependency>
            <!-- 使用指定版本的checkstyle. -->
            <artifactId>checkstyle</artifactId>
            <groupId>com.puppycrawl.tools</groupId>
            <version>10.2</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <goals>
              <!-- 执行哪些步骤-->
              <!-- 只检测,并统计总的问题数量,不会停止编译打包. -->
              <!-- check 会停止编译打包. -->
              <goal>checkstyle</goal>
            </goals>
            <!-- 随便一个名字-->
            <id>validate</id>
            <!-- 与maven的生命周期的某个阶段绑定,与maven验证阶段一起执行代码样式检查. -->
            <phase>validate</phase>
          </execution>
        </executions>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.1.2</version>
      </plugin>
      <!-- 远程发布版本到maven中心使用. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.2</version>
        <executions>
          <execution>
            <id>default-deploy</id>
            <phase>deploy</phase>
            <goals>
              <goal>deploy</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <!-- 主要给deploy提供打包使用,将jar发布到maven仓库中(https://repo.maven.apache.org/maven2/,https://repo.apache.org/maven2/).-->
  <!-- settings.xml
  配置如下:
    <server>
      <id>jdklog</id>
      <username>Sonatype</username>
      <password>Sonatype</password>
    </server>
    <profile>
    <id>jdklog</id>
    <activation>
      <activeByDefault>true</activeByDefault>
    </activation>
      <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.compilerVersion>11</maven.compiler.compilerVersion>
        <gpg.executable>gpg</gpg.executable>
        <gpg.passphrase>gpg密码</gpg.passphrase>
      </properties>
    </profile>
    <activeProfiles>
      <activeProfile>jdklog</activeProfile>
    </activeProfiles>
  -->
  <profiles>
    <profile>
      <id>jdklog</id>
      <build>
        <plugins>
          <!-- Source -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <version>3.2.1</version>
            <executions>
              <execution>
                <phase>package</phase>
                <!--
                maven package:打包到target目录.
                maven install:打包到本地仓库.
                maven deploy:打包上传到远程仓库.
                -->
                <goals>
                  <goal>jar-no-fork</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <!-- Javadoc -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>3.3.2</version>
            <configuration>
              <charset>UTF-8</charset>
              <encoding>UTF-8</encoding>
              <docencoding>UTF-8</docencoding>
              <applyJavadocSecurityFix>true</applyJavadocSecurityFix>
            </configuration>
            <executions>
              <execution>
                <id>attach-javadocs</id>
                <goals>
                  <goal>jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <!-- GPG -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>3.0.1</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>1.6.12</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>jdklog</serverId>
              <nexusUrl>https://s01.oss.sonatype.org/</nexusUrl>
              <!-- true(插件自动关闭和发布),false(手动web ui 点击关闭和发布),推荐false.-->
              <autoReleaseAfterClose>false</autoReleaseAfterClose>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <distributionManagement>
        <snapshotRepository>
          <id>jdklog</id>
          <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
          <id>jdklog</id>
          <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
      </distributionManagement>
    </profile>
  </profiles>
</project>